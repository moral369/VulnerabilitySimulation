//This is source code of favorite. Copyrightⓒ. Tarks. All Rights Reserved.
package a3.utils.shinhan.vulsimul;

import android.content.Context;
import android.os.AsyncTask;
import android.os.Handler;
import android.os.Message;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

public class AsyncHttpTask extends AsyncTask<String, Void, String> {
    private Handler handler;
    int DataContent;
    String responseData;
    String fileName;
    String url, myResult;
    Context context;
    ArrayList paramNames, paramValues, files;
    int handlernum = 1;
    // String[] files;

    // ModApplication

    // Upload
    private static FileInputStream mFileInputStream = null;
    private static URL connectUrl = null;

    public AsyncHttpTask(Context ctx, String urls, Handler handler, int hnum, int Data) {
        //Log.i("Test", "asyc callec");
        // Set handler
        this.handler = handler;
        // Set context
        context = ctx;
        // set url
        url = urls;
        // Arraylists
        // set hanler return number
        handlernum = hnum;
        DataContent = Data;

        // doInBackground("");

        super.execute("");
    }

    @Override
    protected String doInBackground(String... urls) {

        // urls[0]의 URL부터 데이터를 읽어와 String으로 리턴
        // Log.i("URL", url);
        return Task(url);
    }

    @Override
    public void onPreExecute() {
        // Log.i("Test", "onPreExecute Called on global");
    }

    @Override
    protected void onPostExecute(String responseData) {
        // Log.i("Message", "Post");
        AvLog.i("responseData = "+responseData);
        // Log.i("Message", "1");
        Message msg = handler.obtainMessage();
        msg.what = handlernum;
        msg.obj = myResult;
        msg.arg1 = DataContent;
        handler.sendMessage(msg);
        // Log.i("hey", myResult);
    }

    public String Task(String url) {

        String lineEnd = "\r\n";
        String twoHyphens = "--";
        String boundary = "*****";
        AvLog.i("");
        try {
            connectUrl = new URL(url);
            // open connection
            HttpURLConnection conn = (HttpURLConnection) connectUrl.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod("GET");
            conn.setRequestProperty("Content-Type", "application/xml; charset=UTF-8");

            // write data
            OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream(), "UTF-8");// EUC-KR");
            OutputStream os = conn.getOutputStream();
            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));
            writer.write("");
            writer.close();
//            writer.flush();
            out.flush(); // finish upload...
            // get response
            int ch;
            InputStreamReader tmp = new InputStreamReader(conn.getInputStream(), "UTF-8");
            BufferedReader reader = new BufferedReader(tmp);
            StringBuilder builder = new StringBuilder();
            String str;
            AvLog.i("");
            int resultCode = conn.getResponseCode();
            AvLog.i("result code = "+resultCode);

//            while ((str = reader.readLine()) != null) { // 서버에서 라인단위로 보내줄
//                것이므로 라인단위로 읽는다
//                builder.append(str); // View에 표시하기 위해 라인 구분자 추가
//
//            }

//            myResult = builder.toString(); // 전송결과를 전역 변수에 저장
//            AvLog.i("myResult = "+myResult);
            // Log.e("Test", "result = " + myResult);
            //   Log.i("Result value",  myResult + ".");
            out.close();
            // onPostExecute(myResult);

        } catch (Exception e) {
            e.printStackTrace();
            AvLog.i("exception = "+e.getMessage());
            // TODO: handle exception
            // Infoalert(context, mod.getString(R.string.error),
            // mod.getString(R.string.error_des), mod.getString(R.string.yes));
            //Change to error code
            handlernum = -1;
        }
        return null;
    }
}
