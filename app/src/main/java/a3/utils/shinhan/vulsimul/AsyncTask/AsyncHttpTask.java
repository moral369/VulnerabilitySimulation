//This is source code of favorite. Copyrightⓒ. Tarks. All Rights Reserved.
package a3.utils.shinhan.vulsimul.AsyncTask;

import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

import a3.utils.shinhan.vulsimul.Log.AvLog;

public class AsyncHttpTask extends AsyncTask<String, Void, String> {
    private Handler handler;
    int DataContent;
    String responseData;
    String fileName;
    String currentUrl;
    String url, myResult;
    Context context;
    ArrayList paramNames, paramValues, files;
    int handlernum = 1;
    int resultCode;
    String exceptionAsString;
    // String[] files;

    // ModApplication

    // Upload
    private static FileInputStream mFileInputStream = null;
    private static URL connectUrl = null;

    public AsyncHttpTask(Context ctx, String urls, Handler handler, int hnum, int Data) {
        //Log.i("Test", "asyc callec");
        // Set handler
        this.handler = handler;
        // Set context
        context = ctx;
        // set url
        url = urls;
        // Arraylists
        // set hanler return number
        handlernum = hnum;
        DataContent = Data;

        // doInBackground("");

        super.execute("");
    }

    @Override
    protected String doInBackground(String... urls) {

        // urls[0]의 URL부터 데이터를 읽어와 String으로 리턴
        // Log.i("URL", url);
        return Task(url);
    }

    @Override
    public void onPreExecute() {
        // Log.i("Test", "onPreExecute Called on global");
    }

    @Override
    protected void onPostExecute(String responseData) {
        Message msg = handler.obtainMessage();
        msg.what = handlernum;
        msg.obj = myResult;
        msg.arg1 = DataContent;
        msg.arg2 = resultCode;
        Bundle data = new Bundle();
        data.putString("exception", exceptionAsString);
        data.putString("currentUrl", currentUrl);
        msg.setData(data);
        handler.sendMessage(msg);
    }

    public String Task(String url) {
        try {
            currentUrl = url;
            connectUrl = new URL(url);
            // open connection
            HttpURLConnection conn = (HttpURLConnection) connectUrl.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod("GET");
            conn.setReadTimeout(3000);
            conn.setConnectTimeout(1000);
            conn.setRequestProperty("Content-Type", "application/xml; charset=UTF-8");

            // write data
            OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream(), "UTF-8");// EUC-KR");
            OutputStream os = conn.getOutputStream();
            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));
            writer.write("");
            writer.close();
//            writer.flush();
            out.flush(); // finish upload...

            // get response
            resultCode = conn.getResponseCode();

            AvLog.i("resultCode = " + resultCode + " url = " + url.toString());
            int ch;
            boolean isError = resultCode >= 400;
            InputStream is = isError ? conn.getErrorStream() : conn.getInputStream();
            InputStreamReader tmp = new InputStreamReader(is, "UTF-8");
            BufferedReader reader = new BufferedReader(tmp);
            StringBuilder sb = new StringBuilder();

            String str;
            while ((str = reader.readLine()) != null) { // 서버에서 라인단위로 보내줄 것이므로 라인단위로 읽는다
                sb.append(str); // View에 표시하기 위해 라인 구분자 추가
            }
            myResult = sb.toString(); // 전송결과를 전역 변수에 저장
//            AvLog.i("myResult = "+myResult);
            // Log.e("Test", "result = " + myResult);
            //   Log.i("Result value",  myResult + ".");
            out.close();
            // onPostExecute(myResult);

        } catch (Exception e) {
            StringWriter stringWriter = new StringWriter();
            e.printStackTrace(new PrintWriter(stringWriter));
            exceptionAsString = stringWriter.toString();
            AvLog.i("exceptionAsString = "+exceptionAsString);
            handlernum = -1;
            // TODO: handle exception
            // Infoalert(context, mod.getString(R.string.error),
        }
        // mod.getString(R.string.error_des), mod.getString(R.string.yes));
        //Change to error code

        return null;
    }
}
